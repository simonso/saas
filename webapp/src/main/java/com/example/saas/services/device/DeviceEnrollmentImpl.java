
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package com.example.saas.services.device;

import com.example.mdm.persistence.device.AppleDeviceInfo;
import com.example.mdm.service.AppleDeviceInfoService;
import com.example.saas.services.device.types.DeviceInfo;
import com.example.saas.services.device.types.DeviceInfoResponse;
import org.springframework.beans.BeanUtils;

import java.util.logging.Logger;
import java.util.concurrent.Future;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.AsyncHandler;
import javax.xml.ws.Response;

/**
 * This class was generated by Apache CXF 2.4.0
 * 2011-07-14T23:19:25.137-07:00
 * Generated source version: 2.4.0
 * 
 */

@javax.jws.WebService(
                      serviceName = "SOAPService",
                      portName = "SoapPort",
                      targetNamespace = "http://example.com/saas/services/device",
                      wsdlLocation = "mdm_async.wsdl",
                      endpointInterface = "com.example.saas.services.device.DeviceEnrollment")
                      
public class DeviceEnrollmentImpl implements DeviceEnrollment {

    private static final Logger LOG = Logger.getLogger(DeviceEnrollmentImpl.class.getName());

    /* (non-Javadoc)
     * @see com.example.saas.services.device.DeviceEnrollment#enrollDeviceAsync(com.example.saas.services.device.types.DeviceInfo  in )*
     */
    public Response<com.example.saas.services.device.types.DeviceInfoResponse> enrollDeviceAsync(com.example.saas.services.device.types.DeviceInfo in) { 
       return null;
       /* not called */
    }

    /* (non-Javadoc)
     * @see com.example.saas.services.device.DeviceEnrollment#enrollDeviceAsync(com.example.saas.services.device.types.DeviceInfo  in ,)AsyncHandler<com.example.saas.services.device.types.DeviceInfoResponse>  asyncHandler )*
     */
    public Future<?> enrollDeviceAsync(com.example.saas.services.device.types.DeviceInfo in,AsyncHandler<com.example.saas.services.device.types.DeviceInfoResponse> asyncHandler) { 
       return null;
       /* not called */
    }

    /* (non-Javadoc)
     * @see com.example.saas.services.device.DeviceEnrollment#enrollDevice(com.example.saas.services.device.types.DeviceInfo  in )*
     */
    public DeviceInfoResponse enrollDevice(DeviceInfo in) {
        LOG.info("Executing operation enrollDevice");

        AppleDeviceInfo deviceInfo = new AppleDeviceInfo();

        // dto to dao
        BeanUtils.copyProperties(in, deviceInfo);

        deviceInfoService.setAppleDeviceInfo(deviceInfo);

        try {
            DeviceInfoResponse _return = new DeviceInfoResponse();
            _return.setResponseType("enrolled: " + deviceInfo.getDeviceName());
            return _return;
        } catch (Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    private AppleDeviceInfoService deviceInfoService;

    public void setDeviceInfoService(final AppleDeviceInfoService service) {
        deviceInfoService = service;
    }

}
